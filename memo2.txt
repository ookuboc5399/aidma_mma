# プロジェクト概要（aidma-talk）

このプロジェクトは、Googleスプレッドシートから企業情報と既存トークを取得し、社内ナレッジ（Supabase）を参照しながらAIが「改善トーク」を自動生成・提示するアプリです。営業現場の成果を上げることが目的で、非エンジニアでも一括実行ボタンで改善案を得られるように設計されています。

---

## 何ができる？（ユーザー視点）
- トップページで「一括読み込み実行」を押すだけで、スプレッドシートから対象企業のデータを読み込み
- 各行の「AI改善案を生成」または「全件一括生成」で、5種のトークをすべて改善
  - 受付突破 / 対象者通話 / クロージング / アポイント確認 / ヒアリング
- 生成結果は見やすいカードで表示（理由と全文）
- `/ingest` ページから社内ナレッジ（文章）を登録（ベクトル化して検索対象に）
- `/logs` ページで「どのデータをAIに渡し、どのプロンプトで何が返ってきたか」を可視化

---

## 設計の全体像（ざっくり）
- フロント（Next.js App Router）
  - トップページ：ヒーロー＋実行ボタン、結果セクション（白背景カード）
  - 一括生成は Promise.all で並列化し、完了後にまとめて描画
  - ユーザー体験（UX）：スムーズスクロール、ホバー、配色の統一
- バックエンド（Next.js API Routes）
  - `/api/sheets/read`：スプレッドシートのURLから対象行を抽出（H列が「未」）し、12項目＋業界を収集
  - `/api/rag/talk`：RAG実行（下記）とAI出力の整形、ログ保存
  - `/api/ingest`：テキスト分割→埋め込み→`knowledge_documents` に保存
  - `/api/rag/import`：シート→`rag_talk_knowledge` に保存するインポート
- データベース（Supabase/Postgres）
  - `knowledge_documents`（pgvector 1536次元、IVFFlat Index）
  - `match_documents`（類似検索のSQL関数/RPC）
  - `rag_talk_knowledge`（シートの12項目＋業界を保持）
  - `rag_execution_logs`（リクエスト、検索クエリ、取得ナレッジ、最終プロンプト、結果を保存）

---

## RAGの流れ（必読）
1) クエリ生成：業界・事業内容・各トーク要約（受付/対象/ヒア/クロ/アポ）を結合して検索クエリを作成
2) ベクトル化：OpenAI embeddings（text-embedding-3-small = 1536次元）
3) 類似検索：`match_documents` で社内ナレッジから近いテキストを複数件取得
4) プロンプト生成：取得ナレッジ＋企業12項目＋現状トークを合体
5) 生成：5種それぞれの改善案（talk_type, improved_talk, reason）を配列で返却

---

## すごいポイント（この設計の強み）
- 「5種すべて」改善を毎回生成：対象偏りを防止、営業の全フェーズ改善に貢献
- ナレッジをRAGで安全活用：pgvector＋IVFFlatで高速近傍検索、RPCで呼び出しを単純化
- 透明性の高いログ設計：`/logs` で入力→検索→プロンプト→出力を追跡でき、検証・改善が容易
- 並列実行×一括描画：大量行でも安定実行（バックプレッシャは今後キュー導入で強化可能）
- 開発者体験：APIは関心ごと別に分割、型エラーや例外処理を丁寧に、UIは即使える導線

---

## API 一覧（超概要）
- `POST /api/sheets/read`：{ url } → [{ rowIndex, targetSheetId, data|error }]
- `POST /api/rag/talk`：{ 企業12項目+業界+各トーク } → { results: [ {talk_type, improved_talk, reason}×5 ] }
- `POST /api/ingest`：{ text, source } → ナレッジを分割・埋め込み・保存
- `POST /api/rag/import`：{ url } → `rag_talk_knowledge` に保存件数を返却
- `GET /api/logs`：`rag_execution_logs` の直近50件

---

## 今後の拡張案
- RLSポリシー導入と役割別の権限設計（Service Roleの露出最小化）
- インデックス/メタデータの最適化（業界別・商材別のフィルタ）
- UIのワークフロー化（検収→適用→再学習の循環）
- 品質評価の仕組み（人手ラベルでプロンプト/ナレッジの継続改善）

---
